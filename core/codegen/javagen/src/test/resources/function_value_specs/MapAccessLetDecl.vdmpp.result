import org.overture.codegen.runtime.*;

import java.util.*;


@SuppressWarnings("all")
public class Entry {
    public Entry() {
    }

    public static Object Run() {
        final Number c = 1L;
        final VDMSeq l = SeqUtil.seq(1L, 2L, 3L);
        final VDMSeq xs = mmap(new Func_1<Number, Number>() {
                    public Number eval(final Number x) {
                        return x.longValue() + c.longValue();
                    }
                }).eval(Utils.copy(l));

        return ((Number) Utils.get(xs, 1L));
    }

    private static <a, b> Func_1<VDMSeq, VDMSeq> mmap(final Func_1<a, b> f) {
        return new Func_1<VDMSeq, VDMSeq>() {
                public VDMSeq eval(final VDMSeq l) {
                    VDMSeq ternaryIfExp_1 = null;

                    if (Utils.empty(l)) {
                        ternaryIfExp_1 = SeqUtil.seq();
                    } else {
                        ternaryIfExp_1 = SeqUtil.conc(SeqUtil.seq(f.eval(((a) l.get(
                                            0)))),
                                mmap(f).eval(SeqUtil.tail(Utils.copy(l))));
                    }

                    return Utils.copy(ternaryIfExp_1);
                }
            };
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
public interface Func_1<T_1, T_2> {
    public abstract T_2 eval(final T_1 param_1);
}

##########
